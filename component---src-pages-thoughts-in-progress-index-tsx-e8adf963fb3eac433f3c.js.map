{"version":3,"sources":["webpack:///./src/features/posts/utils.ts","webpack:///./src/pages/thoughts-in-progress/index.tsx","webpack:///./src/components/page-title.tsx","webpack:///./src/features/posts/components/index.tsx","webpack:///./src/utils.tsx"],"names":["getPostsFromQuery","props","items","data","allMdx","edges","filter","edge","node","slug","frontmatter","publishedWhen","discoverable","startsWith","path","map","createdWhen","Date","title","preview","sort","leftItem","rightItem","lhs","rhs","getTime","query","ThoughtIndex","description","PageTitle","children","ArticleList","styled","div","theme","spacing","large","ArticleLink","Link","PostIndex","PostList","authorLinks","slice","limit","item","key","bottom","PostPreview","authorLink","level","subtext","getPostHeaderSubtext","to","options","type","date","dateString","toLocaleDateString","weekday","year","month","day","author","prefix"],"mappings":"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","file":"component---src-pages-thoughts-in-progress-index-tsx-e8adf963fb3eac433f3c.js","sourcesContent":["import { graphql } from \"gatsby\";\n\nexport function getPostsFromQuery(props: any) {\n  const { edges } = props.data.allMdx;\n  const items = (edges as any[])\n    .filter((edge) => {\n      const { node } = edge;\n      const { slug, frontmatter } = node;\n      if (!frontmatter?.publishedWhen) {\n        return false;\n      }\n      if (!(frontmatter.discoverable ?? true)) {\n        return false\n      }\n      return (\"/\" + slug).startsWith(props.path);\n    })\n    .map((edge) => {\n      const { node } = edge;\n      const { frontmatter } = node;\n      const createdWhen = new Date(frontmatter.createdWhen);\n      const publishedWhen = new Date(frontmatter.publishedWhen);\n      return {\n        createdWhen,\n        publishedWhen,\n        slug: node.slug as string,\n        title: frontmatter.title as string,\n        preview: frontmatter.preview as string,\n      };\n    });\n  items.sort((leftItem, rightItem) => {\n    const lhs = leftItem.publishedWhen ?? leftItem.createdWhen;\n    const rhs = rightItem.publishedWhen ?? rightItem.createdWhen;\n    return lhs.getTime() < rhs.getTime() ? 1 : -1;\n  });\n  return items;\n}\n\nexport const allPostsQuery = graphql`\n  {\n    allMdx {\n      edges {\n        node {\n          slug\n          frontmatter {\n            title\n            preview\n            createdWhen\n            publishedWhen\n            discoverable\n          }\n        }\n      }\n    }\n  }\n`;\n","import { graphql } from \"gatsby\";\nimport React from \"react\";\nimport { PostIndex } from \"../../features/posts/components\";\n\nconst ThoughtIndex = (props: any) => {\n  return (\n    <PostIndex\n      {...props}\n      title={\"Thoughts in progress\"}\n      description={\n        <>\n          Here I collect things I'm thinking about and may grow into articles\n          over time, so I can collect feedback from other people and generate\n          discussion as I reseach these topics.\n        </>\n      }\n    />\n  );\n};\n\nexport const query = graphql`\n  {\n    allMdx {\n      edges {\n        node {\n          slug\n          frontmatter {\n            title\n            preview\n            createdWhen\n            publishedWhen\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default ThoughtIndex;\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\";\nimport Heading from \"./heading\";\nimport SEO from \"./seo\";\n\nconst PageTitle = (props: { children: string }) => {\n  return (\n    <>\n      <SEO title={props.children} />\n      <Heading>{props.children}</Heading>\n    </>\n  );\n};\n\nexport default PageTitle;\n","import { Link } from \"gatsby\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Margin } from \"styled-components-spacing\";\nimport Heading from \"../../../components/heading\";\n// import { Link } from \"gatsby\"\n\nimport Layout from \"../../../components/layout\";\nimport PageTitle from \"../../../components/page-title\";\nimport Paragraph from \"../../../components/paragraph\";\nimport Subtitle from \"../../../components/subititle\";\nimport { getPostsFromQuery } from \"../../../features/posts/utils\";\nimport { getPostHeaderSubtext } from \"../../../utils\";\n\nconst ArticleList = styled.div`\n  margin-top: calc(${(props) => props.theme.spacing.large} * 4);\n`;\n\nconst ArticleLink = styled(Link)`\n  color: inherit;\n  text-decoration: none;\n`;\n\nexport const PostIndex = (props: {\n  data: any;\n  path: string;\n  title: string;\n  description?: React.ReactNode;\n  authorLinks?: boolean;\n}) => {\n  const items = getPostsFromQuery(props);\n  return (\n    <Layout>\n      <PageTitle>{props.title}</PageTitle>\n      {props.description && <Paragraph>{props.description}</Paragraph>}\n      <ArticleList>\n        <PostList items={items} authorLinks={props.authorLinks} />\n      </ArticleList>\n    </Layout>\n  );\n};\n\nexport function PostList(props: {\n  items: ReturnType<typeof getPostsFromQuery>;\n  authorLinks?: boolean;\n  limit?: number;\n}) {\n  const { items } = props;\n  return (\n    <>\n      {items.slice(0, props.limit).map((item) => {\n        return (\n          <Margin key={item.slug} bottom=\"medium\">\n            <PostPreview\n              slug={item.slug}\n              title={item.title}\n              createdWhen={item.createdWhen}\n              publishedWhen={item.publishedWhen}\n              preview={item.preview}\n              authorLink={props.authorLinks}\n            />\n          </Margin>\n        );\n      })}\n    </>\n  );\n}\n\nfunction PostPreview(props: {\n  slug: string;\n  title: string;\n  createdWhen: string | Date;\n  publishedWhen: string | Date;\n  preview: React.ReactNode;\n  authorLink?: boolean;\n}) {\n  return (\n    <>\n      <Heading\n        level={2}\n        subtext={getPostHeaderSubtext(\n          {\n            createdWhen: props.createdWhen,\n            publishedWhen: props.publishedWhen,\n          },\n          {\n            authorLink: props.authorLink,\n          }\n        )}\n      >\n        <ArticleLink to={`/${props.slug}`}>{props.title}</ArticleLink>\n      </Heading>\n      <Paragraph>{props.preview}</Paragraph>\n    </>\n  );\n}\n","import React from \"react\";\n\nexport function getPostHeaderSubtext(\n  frontmatter: {\n    createdWhen: string | Date;\n    publishedWhen?: string | Date;\n  },\n  options?: {\n    authorLink?: boolean;\n  }\n) {\n  let type: 'page' | 'draft-post' | 'published-post'\n  if (frontmatter.publishedWhen) {\n    type = 'published-post'\n  } else if (frontmatter.createdWhen)  {\n    type = 'draft-post'\n  } else (\n    type = 'page'\n  )\n\n  const date = (frontmatter.publishedWhen || frontmatter.createdWhen) && new Date(frontmatter.publishedWhen ?? frontmatter.createdWhen);\n  const dateString = date && date.toLocaleDateString(\"en-US\", {\n    weekday: \"long\",\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n  });\n  const author = options?.authorLink && \"\"; // kept just in case\n\n  let prefix: React.ReactNode = ''\n  if (type === 'draft-post') {\n    prefix = <>Draft created on {dateString}&nbsp;</>\n  } else if (type === 'published-post') {\n    prefix = <>{dateString}&nbsp;</>\n  } else if (type === 'page') {\n    // prefix = <>Page&nbsp;</>\n  }\n  return (\n    <> {prefix}{author} </>\n  );\n}\n"],"sourceRoot":""}