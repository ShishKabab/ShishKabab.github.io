{"version":3,"sources":["webpack:///./src/pages/thoughts-in-progress/webdev-workflows.mdx","webpack:///./src/components/heading.tsx","webpack:///./src/components/toggle-list.tsx","webpack:///./src/components/layout-markdown.tsx","webpack:///./src/components/paragraph.tsx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","Heading1","styled","h1","Heading2","h2","Heading","level","bottom","Error","ListItemBullet","div","rotate","css","ListItemContent","ToggleList","state","itemsExpanded","toggle","key","this","setState","renderItem","item","hasChildren","children","length","expanded","right","onClick","undefined","content","map","node","left","child","render","React","Component","MarkdownLayout","pageContext","frontmatter","title","h3","p","Children","type","displayName","parsed","parseMdxListRoot","element","generateKey","nodes","Array","listItem","push","parseMdxListItem","StyledParagraph","Paragraph","_objectWithoutPropertiesLoose","source","excluded","i","target","sourceKeys","Object","keys","indexOf"],"mappings":"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","file":"component---src-pages-thoughts-in-progress-webdev-workflows-mdx-28933a2c98bc4ba7251d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/vincent/Documents/Develop/Web/PersonalWebsite/website/src/components/layout-markdown.tsx\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Some basic considerations`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Feedback loop: how can we reduce the time needed from changing code, data or assets, to seeing the result on screen?`}</p>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">\n                <p parentName=\"li\">{`Do I have any manual actions to repeat?`}</p>\n              </li>\n              <li parentName=\"ul\">\n                <p parentName=\"li\">{`How many different UI states do I need to check for a single action?`}</p>\n              </li>\n              <li parentName=\"ul\">\n                <p parentName=\"li\">{`How fast does my code compile?`}</p>\n              </li>\n            </ul>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Developers are not the only ones working on the product`}</p>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">\n                <p parentName=\"li\">{`How can we show the progress we're making as quickly as possible with minimal effort both to safely publish and to view changes?`}</p>\n              </li>\n              <li parentName=\"ul\">\n                <p parentName=\"li\">{`How can we relate different parts of the program to other parts of the organization?`}</p>\n                <ul parentName=\"li\">\n                  <li parentName=\"ul\">\n                    <p parentName=\"li\">{`How easy is it to find out why a certain design decision was made?`}</p>\n                  </li>\n                  <li parentName=\"ul\">\n                    <p parentName=\"li\">{`How can I see what still needs to work when I change some code?`}</p>\n                  </li>\n                  <li parentName=\"ul\">\n                    <p parentName=\"li\">{`How easily can I make cost projections?`}</p>\n                  </li>\n                  <li parentName=\"ul\">\n                    <p parentName=\"li\">{`How easily can I understand user behavior?`}</p>\n                  </li>\n                  <li parentName=\"ul\">\n                    <p parentName=\"li\">{`How can I see in which context which data is queried how and why?`}</p>\n                  </li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { Margin } from \"styled-components-spacing\"\n\nconst Heading1 = styled.h1`\n  font-size: 2em;\n  margin: 0;\n`\n\nconst Heading2 = styled.h2`\n  font-size: 1.5em;\n  margin: 0;\n`\n\nconst Heading = (props: { children: React.ReactNode; level?: number }) => {\n  const level = props.level ?? 1\n  if (level === 1) {\n    return (\n      <Margin bottom=\"medium\">\n        <Heading1 {...props} />\n      </Margin>\n    )\n  } else if (level === 2) {\n    return (\n      <Margin bottom=\"medium\">\n        <Heading2 {...props} />\n      </Margin>\n    )\n  }\n  throw new Error(`Unsupported <Heading> level: ${props.level}`)\n}\n\nexport default Heading\n","import React from \"react\"\nimport styled, { css } from \"styled-components\"\nimport { Margin } from \"styled-components-spacing\"\n\nexport interface ToggleListItem {\n  key: string\n  content: Array<{ key: string; node: React.ReactNode }>\n  children: ToggleListItem[]\n}\n\nconst ListItemBullet = styled.div<{ rotate?: string }>`\n  width: 10px;\n  cursor: pointer;\n  transition: transform 0.15s linear;\n  ${props =>\n    props.rotate\n      ? css`\n          transform: rotate(${props.rotate});\n        `\n      : null}\n`\n\nconst ListItemContent = styled.div`\n  display: flex;\n`\n\ninterface State {\n  itemsExpanded: { [key: string]: boolean }\n}\n\nexport default class ToggleList extends React.Component<\n  {\n    children: ToggleListItem[]\n  },\n  State\n> {\n  state: State = {\n    itemsExpanded: {},\n  }\n\n  toggle(key: string) {\n    this.setState({\n      itemsExpanded: {\n        ...this.state.itemsExpanded,\n        [key]: !this.state.itemsExpanded[key],\n      },\n    })\n  }\n\n  renderItem(item: ToggleListItem) {\n    const hasChildren = !!item.children.length\n    const expanded = !!this.state.itemsExpanded[item.key]\n    return (\n      <div key={item.key}>\n        <ListItemContent>\n          <Margin right=\"medium\">\n            {!hasChildren && <ListItemBullet>&#8226;</ListItemBullet>}\n            {hasChildren && (\n              <ListItemBullet\n                onClick={() => this.toggle(item.key)}\n                rotate={expanded ? \"90deg\" : undefined}\n              >\n                &#8227;\n              </ListItemBullet>\n            )}\n          </Margin>\n          <div>{item.content.map(content => content.node)}</div>\n        </ListItemContent>\n        {expanded && (\n          <Margin left=\"largest\">\n            {item.children.map(child => this.renderItem(child))}\n          </Margin>\n        )}\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <Margin bottom=\"medium\">\n        {this.props.children.map(child => this.renderItem(child))}\n      </Margin>\n    )\n  }\n}\n","import React from \"react\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport Layout from \"./layout\"\nimport Heading from \"./heading\"\nimport Paragraph from \"./paragraph\"\nimport ToggleList, { ToggleListItem } from \"./toggle-list\"\n\nexport default function MarkdownLayout(props: {\n  children: React.ReactNode\n  pageContext: any\n}) {\n  return (\n    <Layout>\n      <Heading level={1}>{props.pageContext.frontmatter.title}</Heading>\n      <MDXProvider\n        components={{\n          h1: props => <Heading level={1}>{props.children}</Heading>,\n          h2: props => <Heading level={3}>{props.children}</Heading>,\n          h3: props => <Heading level={3}>{props.children}</Heading>,\n          p: props => <Paragraph>{props.children}</Paragraph>,\n        }}\n      >\n        {React.Children.map(props.children, child => {\n          if (!child || typeof child !== \"object\") {\n            return child\n          }\n          if (!(\"type\" in child && \"props\" in child)) {\n            return child\n          }\n          if (\n            (child.type as any).displayName !== \"MDXCreateElement\" ||\n            child.props.mdxType !== \"ul\"\n          ) {\n            return child\n          }\n\n          let key = 0\n          const parsed = parseMdxListRoot(child, () => `${key++}`)\n          // console.log(parsed)\n          // return null\n          return <ToggleList children={parsed} />\n        })}\n      </MDXProvider>\n    </Layout>\n  )\n}\n\nexport function parseMdxListRoot(\n  element: React.ReactElement,\n  generateKey: () => string\n) {\n  const nodes: ToggleListItem[] = []\n  let children = element.props.children\n  if (!(children instanceof Array)) {\n    children = [children]\n  }\n\n  for (const listItem of children) {\n    if (listItem.props.mdxType !== \"li\") {\n      continue\n    }\n\n    nodes.push(parseMdxListItem(listItem, generateKey))\n  }\n\n  return nodes\n}\n\nexport function parseMdxListItem(\n  element: React.ReactElement,\n  generateKey: () => string\n): ToggleListItem {\n  if (typeof element.props.children === \"string\") {\n    return {\n      content: [{ key: generateKey(), node: element.props.children }],\n      children: [],\n      key: generateKey(),\n    }\n  }\n\n  const item: ToggleListItem = { content: [], children: [], key: generateKey() }\n  let children = element.props.children\n  if (!(children instanceof Array)) {\n    children = [children]\n  }\n  for (const child of children) {\n    if (typeof child === \"string\") {\n      item.content.push({ key: generateKey(), node: child })\n      continue\n    }\n    if (child.props.mdxType !== \"ul\") {\n      item.content.push({ key: generateKey(), node: child })\n      continue\n    }\n    item.children = parseMdxListRoot(child, generateKey)\n  }\n  return item\n}\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { Margin } from \"styled-components-spacing\"\n\nconst StyledParagraph = styled.p`\n  margin: 0;\n`\n\nconst Paragraph = (props: { children: React.ReactNode }) => {\n  return (\n    <Margin bottom=\"medium\">\n      <StyledParagraph {...props} />\n    </Margin>\n  )\n}\n\nexport default Paragraph\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}