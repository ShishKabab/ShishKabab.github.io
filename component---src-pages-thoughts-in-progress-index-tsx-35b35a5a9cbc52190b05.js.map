{"version":3,"sources":["webpack:///./src/features/posts/utils.ts","webpack:///./src/pages/thoughts-in-progress/index.tsx","webpack:///./src/components/heading.tsx","webpack:///./src/components/page-title.tsx","webpack:///./src/components/subititle.tsx","webpack:///./src/features/posts/components.tsx","webpack:///./src/components/paragraph.tsx"],"names":["getPostsFromQuery","props","items","data","allMdx","edges","filter","edge","node","slug","startsWith","path","map","frontmatter","createdWhen","Date","title","publishedWhen","preview","sort","left","right","getTime","allPostsQuery","query","ThoughtIndex","description","Heading1","styled","h1","Heading2","h2","Heading","level","bottom","Error","PageTitle","children","StyledSubtitle","div","theme","subtitle","Subtitle","ArticleList","spacing","large","ArticleLink","Link","PostIndex","item","published","key","PostPreview","publishedString","toLocaleDateString","weekday","year","month","day","to","StyledParagraph","p","Paragraph"],"mappings":"8FAEO,SAASA,EAAkBC,GAAY,IAEpCC,EADYD,EAAME,KAAKC,OAArBC,MAEHC,QAAO,SAAAC,GAEJ,OAAQ,IADSA,EAAKC,KAAdC,MACYC,WAAWT,EAAMU,SAExCC,KAAI,SAAAL,GAAQ,IACDC,EAASD,EAATC,KACAK,EAAgBL,EAAhBK,YAER,MAAO,CACHC,YAFgB,IAAIC,KAAKF,EAAYC,aAGrCL,KAAMD,EAAKC,KACXO,MAAOH,EAAYG,MACnBC,cAAeJ,EAAYI,cAC3BC,QAASL,EAAYK,YAMjC,OAHAhB,EAAMiB,MAAK,SAACC,EAAMC,GACd,OAAOD,EAAKN,YAAYQ,UAAYD,EAAMP,YAAYQ,UAAY,GAAK,KAEpEpB,EAtBX,oEAyBO,IAAMqB,EAAgB,a,oCC3B7B,kFAoBaC,EApBb,UAoBqBD,EAENE,UAlBM,SAACxB,GAClB,OACI,kBAAC,IAAD,iBACQA,EADR,CAEIe,MAAO,uBACPU,YACI,0N,oCCVhB,iDAIMC,EAAWC,UAAOC,GAAV,wEAAGD,CAAH,6BAKRE,EAAWF,UAAOG,GAAV,wEAAGH,CAAH,+BAuBCI,IAlBC,SAAC/B,GAAyD,MAChEgC,EAAK,UAAGhC,EAAMgC,aAAT,QAAkB,EAC7B,GAAc,IAAVA,EACA,OACI,kBAAC,SAAD,CAAQC,OAAO,UACX,kBAACP,EAAa1B,IAGnB,GAAc,IAAVgC,EACP,OACI,kBAAC,SAAD,CAAQC,OAAO,UACX,kBAACJ,EAAa7B,IAI1B,MAAM,IAAIkC,MAAJ,gCAA0ClC,EAAMgC,S,qKCT3CG,EATG,SAACnC,GACjB,OACE,oCACI,kBAAC,IAAD,CAAKe,MAAOf,EAAMoC,WAClB,kBAAC,IAAD,KAAUpC,EAAMoC,Y,YCZlBC,EAAiBV,UAAOW,IAAV,gFAAGX,CAAH,gCAEP,SAAA3B,GAAK,OAAIA,EAAMuC,MAAMC,YAGnB,SAASC,EAASzC,GAC7B,OAAO,kBAACqC,EAAD,KAAiBrC,EAAMoC,U,gBCI5BM,EAAcf,UAAOW,IAAV,6EAAGX,CAAH,+BACM,SAAA3B,GAAK,OAAIA,EAAMuC,MAAMI,QAAQC,SAG9CC,EAAclB,kBAAOmB,QAAV,6EAAGnB,CAAH,yCAKJoB,EAAY,SAAC/C,GAMtB,IAAMC,EAAQF,YAAkBC,GAChC,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,KAAYA,EAAMe,OACjBf,EAAMyB,aAAe,kBAAC,IAAD,KAAYzB,EAAMyB,aACxC,kBAACiB,EAAD,KACKzC,EAAMU,KAAI,SAAAqC,GACP,IAAMC,EAAY,IAAInC,KAAKkC,EAAKhC,eAChC,OACI,kBAAC,SAAD,CAAQkC,IAAKF,EAAKxC,KAAMyB,OAAO,UAC3B,kBAAC,EAAD,CACIzB,KAAMwC,EAAKxC,KACXO,MAAOiC,EAAKjC,MACZC,cAAeiC,EACfhC,QAAS+B,EAAK/B,iBAUjCkC,EAAc,SAACnD,GAMxB,IAAMoD,EAAkBpD,EAAMgB,cAAcqC,mBAAmB,QAAS,CACpEC,QAAS,OACTC,KAAM,UACNC,MAAO,OACPC,IAAK,YAET,OACI,kBAACZ,EAAD,CAAaa,GAAE,IAAM1D,EAAMQ,MACvB,kBAAC,IAAD,CAASwB,MAAO,GAAIhC,EAAMe,OAC1B,kBAAC,SAAD,CAAQkB,OAAO,SACX,kBAACQ,EAAD,KAAWW,IAEf,kBAAC,IAAD,KAAYpD,EAAMiB,Y,kCCtE9B,iDAWM0C,EAAkBhC,UAAOiC,EAAV,iFAAGjC,CAAH,eAYNkC,IARG,SAAC7D,GACjB,OACE,kBAAC,SAAD,CAAQiC,OAAO,UACb,kBAAC0B,EAAoB3D","file":"component---src-pages-thoughts-in-progress-index-tsx-35b35a5a9cbc52190b05.js","sourcesContent":["import { graphql } from \"gatsby\"\n\nexport function getPostsFromQuery(props: any) {\n    const { edges } = props.data.allMdx\n    const items = (edges as any[])\n        .filter(edge => {\n            const { slug } = edge.node\n            return (\"/\" + slug).startsWith(props.path)\n        })\n        .map(edge => {\n            const { node } = edge\n            const { frontmatter } = node\n            const createdWhen = new Date(frontmatter.createdWhen)\n            return {\n                createdWhen,\n                slug: node.slug as string,\n                title: frontmatter.title as string,\n                publishedWhen: frontmatter.publishedWhen as any,\n                preview: frontmatter.preview as string,\n            }\n        })\n    items.sort((left, right) => {\n        return left.createdWhen.getTime() < right.createdWhen.getTime() ? 1 : -1\n    })\n    return items\n}\n\nexport const allPostsQuery = graphql`\n{\n    allMdx {\n        edges {\n            node {\n                slug\n                frontmatter {\n                    title\n                    preview\n                    publishedWhen\n                }\n            }\n        }\n    }\n}\n`","import React from \"react\"\nimport { PostIndex } from \"../../features/posts/components\"\nimport { allPostsQuery } from \"../../features/posts/utils\"\n\nconst ThoughtIndex = (props: any) => {\n    return (\n        <PostIndex\n            {...props}\n            title={\"Thoughts in progress\"}\n            description={\n                <>\n                    Here I collect things I'm thinking about and may grow into\n                    articles over time, so I can collect feedback from other\n                    people and generate discussion as I reseach these topics.\n                </>\n            }\n        />\n    )\n}\n\nexport const query = allPostsQuery\n\nexport default ThoughtIndex\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { Margin } from \"styled-components-spacing\"\n\nconst Heading1 = styled.h1`\n    font-size: 2em;\n    margin: 0;\n`\n\nconst Heading2 = styled.h2`\n    font-size: 1.5em;\n    margin: 0;\n`\n\nconst Heading = (props: { children: React.ReactNode; level?: number }) => {\n    const level = props.level ?? 1\n    if (level === 1) {\n        return (\n            <Margin bottom=\"medium\">\n                <Heading1 {...props} />\n            </Margin>\n        )\n    } else if (level === 2) {\n        return (\n            <Margin bottom=\"medium\">\n                <Heading2 {...props} />\n            </Margin>\n        )\n    }\n    throw new Error(`Unsupported <Heading> level: ${props.level}`)\n}\n\nexport default Heading\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport Heading from \"./heading\"\nimport SEO from \"./seo\"\n\nconst PageTitle = (props: { children: string }) => {\n  return (\n    <>\n        <SEO title={props.children} />\n        <Heading>{props.children}</Heading>\n    </>\n  )\n}\n\nexport default PageTitle\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nconst StyledSubtitle = styled.div`\n    font-size: 0.8em;\n    color: ${props => props.theme.subtitle};\n`\n\nexport default function Subtitle(props: { children: React.ReactNode }) {\n    return <StyledSubtitle>{props.children}</StyledSubtitle>\n}\n","import { Link } from \"gatsby\"\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { Margin } from \"styled-components-spacing\"\nimport Heading from \"../../components/heading\"\n// import { Link } from \"gatsby\"\n\nimport Layout from \"../../components/layout\"\nimport PageTitle from \"../../components/page-title\"\nimport Paragraph from \"../../components/paragraph\"\nimport Subtitle from \"../../components/subititle\"\nimport { getPostsFromQuery } from \"../../features/posts/utils\"\n\nconst ArticleList = styled.div`\n    margin-top: calc(${props => props.theme.spacing.large} * 4);\n`\n\nconst ArticleLink = styled(Link)`\n    color: inherit;\n    text-decoration: none;\n`\n\nexport const PostIndex = (props: {\n    data: any\n    path: string\n    title: string\n    description?: React.ReactNode\n}) => {\n    const items = getPostsFromQuery(props)\n    return (\n        <Layout>\n            <PageTitle>{props.title}</PageTitle>\n            {props.description && <Paragraph>{props.description}</Paragraph>}\n            <ArticleList>\n                {items.map(item => {\n                    const published = new Date(item.publishedWhen)\n                    return (\n                        <Margin key={item.slug} bottom=\"medium\">\n                            <PostPreview\n                                slug={item.slug}\n                                title={item.title}\n                                publishedWhen={published}\n                                preview={item.preview}\n                            />\n                        </Margin>\n                    )\n                })}\n            </ArticleList>\n        </Layout>\n    )\n}\n\nexport const PostPreview = (props: {\n    slug: string\n    title: string\n    publishedWhen: Date\n    preview: React.ReactNode\n}) => {\n    const publishedString = props.publishedWhen.toLocaleDateString(\"en-US\", {\n        weekday: \"long\",\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n    })\n    return (\n        <ArticleLink to={`/${props.slug}`}>\n            <Heading level={2}>{props.title}</Heading>\n            <Margin bottom=\"large\">\n                <Subtitle>{publishedString}</Subtitle>\n            </Margin>\n            <Paragraph>{props.preview}</Paragraph>\n        </ArticleLink>\n    )\n}\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { Margin } from \"styled-components-spacing\"\n\nconst StyledParagraph = styled.p`\n  margin: 0;\n`\n\nconst Paragraph = (props: { children: React.ReactNode }) => {\n  return (\n    <Margin bottom=\"medium\">\n      <StyledParagraph {...props} />\n    </Margin>\n  )\n}\n\nexport default Paragraph\n"],"sourceRoot":""}