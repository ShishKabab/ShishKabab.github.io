{"version":3,"sources":["webpack:///./src/pages/blog/architecture-docs-prototype.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"2OAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,yYACA,gEACA,sBACE,kBAAIC,WAAW,MAAf,0GACA,kBAAIA,WAAW,MAAf,yEACA,kBAAIA,WAAW,MAAf,iGACA,kBAAIA,WAAW,MAAf,yGAEF,yCACA,sBACE,kBAAIA,WAAW,MAAf,2EACA,kBAAIA,WAAW,MAAf,+EACA,kBAAIA,WAAW,MAAf,kFACA,kBAAIA,WAAW,MAAf,+FAEF,qqBACA,oKACA,oFAKJJ,EAAWK,gBAAiB","file":"component---src-pages-blog-architecture-docs-prototype-mdx-04cf841c56db526997de.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/vincent/Documents/Develop/Web/PersonalWebsite/website/src/components/layout-markdown.tsx\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`We all like good documentation, but most of us don’t actually put in the effort to write it. Why? Firstly, we’d rather spend our time actually building stuff. But more importantly, for all the time put into it and putting up with various drawing tools, it might be out of date by the time someone needs to look at it. Worse, there’s no way of telling it’s out of date.`}</p>\n    <p>{`But let’s break this down even further:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The frequency with which documentation is used is way too low for most projects to be worth the effort`}</li>\n      <li parentName=\"ul\">{`Most methods like scattering diagrams through Notion don’t scale well`}</li>\n      <li parentName=\"ul\">{`You have to manually write this documentation and it’s labor-intensive, skilled work to do so`}</li>\n      <li parentName=\"ul\">{`Only developers can derive use from it, so it’s hard to get buy-in from the rest of the organization`}</li>\n    </ul>\n    <p>{`What if we could`}</p>\n    <ul>\n      <li parentName=\"ul\">{`make the documentation more frequently useful, also for non-developers?`}</li>\n      <li parentName=\"ul\">{`automate part of the work, with manual work only giving you bonus insights?`}</li>\n      <li parentName=\"ul\">{`query the results, so you can filter for answers to questions you need solved?`}</li>\n      <li parentName=\"ul\">{`produce a single, nested diagram that show how all different pieces of the system connect?`}</li>\n    </ul>\n    <p>{`That’s what I’m prototyping in my spare time using the Zig programming language. First, it’s a personal exploration in Data Oriented Design, to see performant I can make this to support huge, automatically generated diagrams, merged with human data. (My first test with 1,5 million nodes loads in 5 seconds for now without almost no optimization work.) Also, I did some first experiment performing static analysis on a real-world web code-base and see if I can show which screens in the front-end read and write what kind data from the back-end through which code paths. This would make this a new, customizable way to easily navigate large code-bases.`}</p>\n    <p>{`Along the way I’ll be posting about lessons learned in parsing, how simple code can be very performant, debugging, profiling and much more!`}</p>\n    <p>{`Keep in touch if this resonates with you and see you soon!`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}