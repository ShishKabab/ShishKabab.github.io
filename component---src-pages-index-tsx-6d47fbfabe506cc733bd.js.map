{"version":3,"sources":["webpack:///./src/features/posts/utils.ts","webpack:///./src/components/page-title.tsx","webpack:///./src/features/posts/components/index.tsx","webpack:///./src/utils.tsx","webpack:///./src/components/vincent-style.tsx","webpack:///./src/pages/index.tsx"],"names":["getPostsFromQuery","props","items","data","allMdx","edges","filter","edge","node","slug","frontmatter","publishedWhen","discoverable","startsWith","path","map","createdWhen","Date","title","preview","sort","leftItem","rightItem","lhs","rhs","getTime","PageTitle","children","ArticleList","styled","div","theme","spacing","large","ArticleLink","Link","PostIndex","description","PostList","authorLinks","slice","limit","item","key","bottom","PostPreview","authorLink","level","subtext","getPostHeaderSubtext","to","options","date","isPublished","dateString","toLocaleDateString","weekday","year","month","day","author","href","Styled","span","VincentStyle","IntroBox","BlogBox","BlogLink","query","IndexPage","blogItems","top"],"mappings":"8FAEO,SAASA,EAAkBC,GAAY,IAEtCC,EADYD,EAAME,KAAKC,OAArBC,MAELC,QAAO,SAACC,GAAS,MACRC,EAASD,EAATC,KACAC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,YACd,SAAKA,aAAD,EAACA,EAAaC,mBAGd,UAAED,EAAYE,oBAAd,aAGI,IAAMH,GAAMI,WAAWZ,EAAMa,UAEtCC,KAAI,SAACR,GAAS,IACLC,EAASD,EAATC,KACAE,EAAgBF,EAAhBE,YAGR,MAAO,CACLM,YAHkB,IAAIC,KAAKP,EAAYM,aAIvCL,cAHoB,IAAIM,KAAKP,EAAYC,eAIzCF,KAAMD,EAAKC,KACXS,MAAOR,EAAYQ,MACnBC,QAAST,EAAYS,YAQ3B,OALAjB,EAAMkB,MAAK,SAACC,EAAUC,GAAc,QAC5BC,EAAG,UAAGF,EAASV,qBAAZ,QAA6BU,EAASL,YACzCQ,EAAG,UAAGF,EAAUX,qBAAb,QAA8BW,EAAUN,YACjD,OAAOO,EAAIE,UAAYD,EAAIC,UAAY,GAAK,KAEvCvB,EAhCT,mC,uMCkBewB,EATG,SAACzB,GACjB,OACE,oCACE,kBAAC,IAAD,CAAKiB,MAAOjB,EAAM0B,WAClB,kBAAC,IAAD,KAAU1B,EAAM0B,Y,oCCDhBC,EAAcC,UAAOC,IAAV,0EAAGD,CAAH,+BACI,SAAC5B,GAAD,OAAWA,EAAM8B,MAAMC,QAAQC,SAG9CC,EAAcL,kBAAOM,QAAV,0EAAGN,CAAH,yCAKJO,EAAY,SAACnC,GAOxB,IAAMC,EAAQF,YAAkBC,GAChC,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,KAAYA,EAAMiB,OACjBjB,EAAMoC,aAAe,kBAAC,IAAD,KAAYpC,EAAMoC,aACxC,kBAACT,EAAD,KACE,kBAACU,EAAD,CAAUpC,MAAOA,EAAOqC,YAAatC,EAAMsC,iBAM5C,SAASD,EAASrC,GAItB,IACOC,EAAUD,EAAVC,MACR,OACE,oCACGA,EAAMsC,MAAM,EAAGvC,EAAMwC,OAAO1B,KAAI,SAAC2B,GAChC,OACE,kBAAC,SAAD,CAAQC,IAAKD,EAAKjC,KAAMmC,OAAO,UAC7B,kBAACC,EAAD,CACEpC,KAAMiC,EAAKjC,KACXS,MAAOwB,EAAKxB,MACZF,YAAa0B,EAAK1B,YAClBL,cAAe+B,EAAK/B,cACpBQ,QAASuB,EAAKvB,QACd2B,WAAY7C,EAAMsC,mBAShC,SAASM,EAAY5C,GAQnB,OACE,oCACE,kBAAC,IAAD,CACE8C,MAAO,EACPC,QAASC,YACP,CACEjC,YAAaf,EAAMe,YACnBL,cAAeV,EAAMU,eAEvB,CACEmC,WAAY7C,EAAM6C,cAItB,kBAACZ,EAAD,CAAagB,GAAE,IAAMjD,EAAMQ,MAASR,EAAMiB,QAE5C,kBAAC,IAAD,KAAYjB,EAAMkB,Y,kCC5FxB,uEAGO,SAAS8B,EACdvC,EAIAyC,GAGA,MACMC,EAAO,IAAInC,KAAJ,UAASP,EAAYC,qBAArB,QAAsCD,EAAYM,aACzDqC,IAAgB3C,EAAYC,cAC5B2C,EAAaF,EAAKG,mBAAmB,QAAS,CAClDC,QAAS,OACTC,KAAM,UACNC,MAAO,OACPC,IAAK,YAEDC,GAAST,aAAA,EAAAA,EAASL,aACtB,yCACK,IACH,uBAAGe,KAAK,KACN,kBAAC,IAAD,2BAIN,OACE,oCACGR,EAAcC,EAAH,oBAAoCA,EADlD,IAGGM,K,kCChCP,2DAGME,EAHN,UAGejC,QAAOkC,KAAV,wEAAGlC,CAAH,mDAMG,SAASmC,EAAa/D,GACnC,OAAO,kBAAC6D,EAAD,KAAS7D,EAAM0B,Y,kCCVxB,0MAeMsC,EAAWpC,UAAOC,IAAV,sEAAGD,CAAH,0FAURqC,EAAUrC,UAAOC,IAAV,qEAAGD,CAAH,MACPsC,EAAWtC,kBAAOM,QAAV,sEAAGN,CAAH,gFAsEP,IAAMuC,EAAQ,aAmBNC,UAlFf,SAAmBpE,GACjB,IAAMqE,EAAYtE,YAAkBC,GACpC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKiB,MAAM,SACX,kBAAC+C,EAAD,KACE,kBAAC,IAAD,yBACA,kBAAC,IAAD,KACE,kBAAC,IAAD,sBADF,2TAQA,kBAAC,IAAD,sFAEW,IACT,kBAAC,IAAD,CAAcJ,KAAK,yBAAnB,SAHF,0EAKE,4BACE,kHAIA,uHAIA,qHAIA,gKAMJ,kBAAC,IAAD,qBACgB,IACd,kBAAC,IAAD,CAAcA,KAAK,oCAChB,IADH,8BAFF,qCAMqC,IACnC,kBAAC,IAAD,CAAcA,KAAK,kCAChB,IADH,YAMJ,kBAACK,EAAD,KACE,kBAAC,IAAD,CAASnB,MAAO,GAAhB,cACA,kBAAC,IAAD,CAAU7C,MAAOoE,EAAW7B,MAAO,IACnC,kBAAC,SAAD,CAAQ8B,IAAI,SACV,kBAACJ,EAAD,CAAUjB,GAAG,UAAb","file":"component---src-pages-index-tsx-6d47fbfabe506cc733bd.js","sourcesContent":["import { graphql } from \"gatsby\";\n\nexport function getPostsFromQuery(props: any) {\n  const { edges } = props.data.allMdx;\n  const items = (edges as any[])\n    .filter((edge) => {\n      const { node } = edge;\n      const { slug, frontmatter } = node;\n      if (!frontmatter?.publishedWhen) {\n        return false;\n      }\n      if (!(frontmatter.discoverable ?? true)) {\n        return false\n      }\n      return (\"/\" + slug).startsWith(props.path);\n    })\n    .map((edge) => {\n      const { node } = edge;\n      const { frontmatter } = node;\n      const createdWhen = new Date(frontmatter.createdWhen);\n      const publishedWhen = new Date(frontmatter.publishedWhen);\n      return {\n        createdWhen,\n        publishedWhen,\n        slug: node.slug as string,\n        title: frontmatter.title as string,\n        preview: frontmatter.preview as string,\n      };\n    });\n  items.sort((leftItem, rightItem) => {\n    const lhs = leftItem.publishedWhen ?? leftItem.createdWhen;\n    const rhs = rightItem.publishedWhen ?? rightItem.createdWhen;\n    return lhs.getTime() < rhs.getTime() ? 1 : -1;\n  });\n  return items;\n}\n\nexport const allPostsQuery = graphql`\n  {\n    allMdx {\n      edges {\n        node {\n          slug\n          frontmatter {\n            title\n            preview\n            createdWhen\n            publishedWhen\n            discoverable\n          }\n        }\n      }\n    }\n  }\n`;\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\";\nimport Heading from \"./heading\";\nimport SEO from \"./seo\";\n\nconst PageTitle = (props: { children: string }) => {\n  return (\n    <>\n      <SEO title={props.children} />\n      <Heading>{props.children}</Heading>\n    </>\n  );\n};\n\nexport default PageTitle;\n","import { Link } from \"gatsby\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Margin } from \"styled-components-spacing\";\nimport Heading from \"../../../components/heading\";\n// import { Link } from \"gatsby\"\n\nimport Layout from \"../../../components/layout\";\nimport PageTitle from \"../../../components/page-title\";\nimport Paragraph from \"../../../components/paragraph\";\nimport Subtitle from \"../../../components/subititle\";\nimport { getPostsFromQuery } from \"../../../features/posts/utils\";\nimport { getPostHeaderSubtext } from \"../../../utils\";\n\nconst ArticleList = styled.div`\n  margin-top: calc(${(props) => props.theme.spacing.large} * 4);\n`;\n\nconst ArticleLink = styled(Link)`\n  color: inherit;\n  text-decoration: none;\n`;\n\nexport const PostIndex = (props: {\n  data: any;\n  path: string;\n  title: string;\n  description?: React.ReactNode;\n  authorLinks?: boolean;\n}) => {\n  const items = getPostsFromQuery(props);\n  return (\n    <Layout>\n      <PageTitle>{props.title}</PageTitle>\n      {props.description && <Paragraph>{props.description}</Paragraph>}\n      <ArticleList>\n        <PostList items={items} authorLinks={props.authorLinks} />\n      </ArticleList>\n    </Layout>\n  );\n};\n\nexport function PostList(props: {\n  items: ReturnType<typeof getPostsFromQuery>;\n  authorLinks?: boolean;\n  limit?: number;\n}) {\n  const { items } = props;\n  return (\n    <>\n      {items.slice(0, props.limit).map((item) => {\n        return (\n          <Margin key={item.slug} bottom=\"medium\">\n            <PostPreview\n              slug={item.slug}\n              title={item.title}\n              createdWhen={item.createdWhen}\n              publishedWhen={item.publishedWhen}\n              preview={item.preview}\n              authorLink={props.authorLinks}\n            />\n          </Margin>\n        );\n      })}\n    </>\n  );\n}\n\nfunction PostPreview(props: {\n  slug: string;\n  title: string;\n  createdWhen: string | Date;\n  publishedWhen: string | Date;\n  preview: React.ReactNode;\n  authorLink?: boolean;\n}) {\n  return (\n    <>\n      <Heading\n        level={2}\n        subtext={getPostHeaderSubtext(\n          {\n            createdWhen: props.createdWhen,\n            publishedWhen: props.publishedWhen,\n          },\n          {\n            authorLink: props.authorLink,\n          }\n        )}\n      >\n        <ArticleLink to={`/${props.slug}`}>{props.title}</ArticleLink>\n      </Heading>\n      <Paragraph>{props.preview}</Paragraph>\n    </>\n  );\n}\n","import React from \"react\";\nimport VincentStyle from \"./components/vincent-style\";\n\nexport function getPostHeaderSubtext(\n  frontmatter: {\n    createdWhen: string | Date;\n    publishedWhen?: string | Date;\n  },\n  options?: {\n    authorLink?: boolean;\n  }\n) {\n  const date = new Date(frontmatter.publishedWhen ?? frontmatter.createdWhen);\n  const isPublished = !!frontmatter.publishedWhen;\n  const dateString = date.toLocaleDateString(\"en-US\", {\n    weekday: \"long\",\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n  });\n  const author = options?.authorLink && (\n    <>\n      by{\" \"}\n      <a href=\"/\">\n        <VincentStyle>Vincent den Boer</VincentStyle>\n      </a>\n    </>\n  );\n  return (\n    <>\n      {isPublished ? dateString : `Draft created on ${dateString}`}\n      &nbsp;\n      {author}\n    </>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Styled = styled.span`\n  background: #ff0;\n  padding: 5px;\n  font-weight: bold;\n`;\n\nexport default function VincentStyle(props: { children: React.ReactNode }) {\n  return <Styled>{props.children}</Styled>;\n}\n","import { graphql, Link } from \"gatsby\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Margin } from \"styled-components-spacing\";\nimport ExternalLink from \"../components/external-link\";\nimport Heading from \"../components/heading\";\n// import { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\";\nimport Paragraph from \"../components/paragraph\";\nimport SEO from \"../components/seo\";\nimport VinceStyle from \"../components/vincent-style\";\nimport { PostList } from \"../features/posts/components\";\nimport { getPostsFromQuery } from \"../features/posts/utils\";\n\nconst IntroBox = styled.div`\n  margin: 100px 0;\n  width: 100%;\n  max-width: 500px;\n\n  @media (max-width: 700px) {\n    margin-top: 50px;\n  }\n`;\n\nconst BlogBox = styled.div``;\nconst BlogLink = styled(Link)`\n  color: inherit;\n  font-size: 1.2rem;\n  font-weight: bold;\n  text-decoration: underline;\n`;\n\nfunction IndexPage(props: any) {\n  const blogItems = getPostsFromQuery(props);\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <IntroBox>\n        <Heading>Hey, I'm Vincent</Heading>\n        <Paragraph>\n          <VinceStyle>I help people</VinceStyle> and organizations to build\n          digital products that can continue to adapt quickly as they grow. By\n          using the right tools and techniques fitting the context of teams and\n          the problems they're solving, I'm obsessed with bringing joy and\n          excitement to people working together to bring something useful into\n          the world!\n        </Paragraph>\n        <Paragraph>\n          What does that look like? Over the last years, I've helped WorldBrain\n          to build{\" \"}\n          <ExternalLink href=\"https://memex.garden/\">Memex</ExternalLink>,\n          setting up in such a way that with a 2-developer team we were able to\n          <ol>\n            <li>\n              launch an elegant, simple and privacy-focused multi-client\n              database sync mechanism\n            </li>\n            <li>\n              transition the whole product from local-first to cloud-based in a\n              very short time-frame\n            </li>\n            <li>\n              transition a big chunk of business logic from the browser\n              extension to the mobile app\n            </li>\n            <li>\n              develop forward-thinking development workflows that allowed easy\n              outsourcing of styling work and reduce daily iteration times.\n            </li>\n          </ol>\n        </Paragraph>\n        <Paragraph>\n          Want to talk?{\" \"}\n          <ExternalLink href=\"https://twitter.com/vince_d_boer\">\n            {\" \"}\n            Connect with me on Twitter\n          </ExternalLink>\n          ! Or, check out some of my work on{\" \"}\n          <ExternalLink href=\"https://github.com/ShishKabab/\">\n            {\" \"}\n            GitHub\n          </ExternalLink>\n        </Paragraph>\n      </IntroBox>\n      <BlogBox>\n        <Heading level={1}>Blog posts</Heading>\n        <PostList items={blogItems} limit={3} />\n        <Margin top=\"large\">\n          <BlogLink to=\"/blog/\">All posts &gt;&gt;</BlogLink>\n        </Margin>\n      </BlogBox>\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  {\n    allMdx {\n      edges {\n        node {\n          slug\n          frontmatter {\n            title\n            preview\n            createdWhen\n            publishedWhen\n            discoverable\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n"],"sourceRoot":""}