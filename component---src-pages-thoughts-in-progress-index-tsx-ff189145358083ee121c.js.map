{"version":3,"sources":["webpack:///./src/components/page-title.tsx","webpack:///./src/pages/thoughts-in-progress/index.tsx","webpack:///./src/components/heading.tsx","webpack:///./src/components/paragraph.tsx"],"names":["PageTitle","props","title","children","ArticleList","styled","div","theme","spacing","large","ArticleLink","Link","Article","to","slug","level","preview","query","ThoughtsIndex","console","log","items","data","allMdx","edges","filter","edge","node","startsWith","path","map","frontmatter","createdWhen","Date","sort","left","right","getTime","item","key","bottom","Heading1","h1","Heading2","h2","Heading","Error","StyledParagraph","p","Paragraph"],"mappings":"2OAoBeA,EATG,SAACC,GACjB,OACE,oCACI,kBAAC,IAAD,CAAKC,MAAOD,EAAME,WAClB,kBAAC,IAAD,KAAUF,EAAME,Y,YCJlBC,EAAcC,UAAOC,IAAV,uFAAGD,CAAH,+BACI,SAAAJ,GAAK,OAAIA,EAAMM,MAAMC,QAAQC,SAG5CC,EAAcL,kBAAOM,QAAV,uFAAGN,CAAH,yCAoDXO,EAAU,SAACX,GAKf,OACE,kBAACS,EAAD,CAAaG,GAAE,IAAMZ,EAAMa,MACzB,kBAAC,IAAD,CAASC,MAAO,GAAId,EAAMC,OAC1B,kBAAC,IAAD,KAAYD,EAAMe,WAKXC,EAAQ,YAiBNC,UA7EO,SAACjB,GACrBkB,QAAQC,IAAInB,GADwB,IAG9BoB,EADYpB,EAAMqB,KAAKC,OAArBC,MAELC,QAAO,SAAAC,GAEN,OAAQ,IADSA,EAAKC,KAAdb,MACYc,WAAW3B,EAAM4B,SAEtCC,KAAI,SAAAJ,GAAQ,IACHC,EAASD,EAATC,KACAI,EAAgBJ,EAAhBI,YAER,MAAO,CACLC,YAFkB,IAAIC,KAAKF,EAAYC,aAGvClB,KAAMa,EAAKb,KACXZ,MAAO6B,EAAY7B,MACnBc,QAASe,EAAYf,YAM3B,OAHAK,EAAMa,MAAK,SAACC,EAAMC,GAChB,OAAOD,EAAKH,YAAYK,UAAYD,EAAMJ,YAAYK,UAAY,GAAK,KAGvE,kBAAC,IAAD,KACE,kBAAC,EAAD,6BACA,kBAAC,IAAD,sLAKA,kBAACjC,EAAD,KACGiB,EAAMS,KAAI,SAAAQ,GACT,OACE,kBAAC,SAAD,CAAQC,IAAKD,EAAKxB,KAAM0B,OAAO,UAC7B,kBAAC,EAAD,CACE1B,KAAMwB,EAAKxB,KACXZ,MAAOoC,EAAKpC,MACZc,QAASsB,EAAKtB,kB,oCCzD9B,iDAWMyB,EAAWpC,UAAOqC,GAAV,wEAAGrC,CAAH,6BAKRsC,EAAWtC,UAAOuC,GAAV,wEAAGvC,CAAH,+BAuBCwC,IAlBC,SAAC5C,GAAyD,MAClEc,EAAK,UAAGd,EAAMc,aAAT,QAAkB,EAC7B,GAAc,IAAVA,EACF,OACE,kBAAC,SAAD,CAAQyB,OAAO,UACb,kBAACC,EAAaxC,IAGb,GAAc,IAAVc,EACT,OACE,kBAAC,SAAD,CAAQyB,OAAO,UACb,kBAACG,EAAa1C,IAIpB,MAAM,IAAI6C,MAAJ,gCAA0C7C,EAAMc,S,kCCpCxD,iDAWMgC,EAAkB1C,UAAO2C,EAAV,iFAAG3C,CAAH,eAYN4C,IARG,SAAChD,GACjB,OACE,kBAAC,SAAD,CAAQuC,OAAO,UACb,kBAACO,EAAoB9C","file":"component---src-pages-thoughts-in-progress-index-tsx-ff189145358083ee121c.js","sourcesContent":["/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport Heading from \"./heading\"\nimport SEO from \"./seo\"\n\nconst PageTitle = (props: { children: string }) => {\n  return (\n    <>\n        <SEO title={props.children} />\n        <Heading>{props.children}</Heading>\n    </>\n  )\n}\n\nexport default PageTitle\n","import { graphql, Link } from \"gatsby\"\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { Margin } from \"styled-components-spacing\"\nimport Heading from \"../../components/heading\"\n// import { Link } from \"gatsby\"\n\nimport Layout from \"../../components/layout\"\nimport PageTitle from \"../../components/page-title\"\nimport Paragraph from \"../../components/paragraph\"\n\nconst ArticleList = styled.div`\n  margin-top: calc(${props => props.theme.spacing.large} * 4);\n`\n\nconst ArticleLink = styled(Link)`\n  color: inherit;\n  text-decoration: none;\n`\n\nconst ThoughtsIndex = (props: any) => {\n  console.log(props)\n  const { edges } = props.data.allMdx\n  const items = (edges as any[])\n    .filter(edge => {\n      const { slug } = edge.node\n      return (\"/\" + slug).startsWith(props.path)\n    })\n    .map(edge => {\n      const { node } = edge\n      const { frontmatter } = node\n      const createdWhen = new Date(frontmatter.createdWhen)\n      return {\n        createdWhen,\n        slug: node.slug as string,\n        title: frontmatter.title as string,\n        preview: frontmatter.preview as string,\n      }\n    })\n  items.sort((left, right) => {\n    return left.createdWhen.getTime() < right.createdWhen.getTime() ? 1 : -1\n  })\n  return (\n    <Layout>\n      <PageTitle>Thoughts in progress</PageTitle>\n      <Paragraph>\n        Here I collect things I'm thinking about and may grow into articles over\n        time, so I can collect feedback from other people and generate\n        discussion as I reseach these topics.\n      </Paragraph>\n      <ArticleList>\n        {items.map(item => {\n          return (\n            <Margin key={item.slug} bottom=\"medium\">\n              <Article\n                slug={item.slug}\n                title={item.title}\n                preview={item.preview}\n              />\n            </Margin>\n          )\n        })}\n      </ArticleList>\n    </Layout>\n  )\n}\n\nconst Article = (props: {\n  slug: string\n  title: string\n  preview: React.ReactNode\n}) => {\n  return (\n    <ArticleLink to={`/${props.slug}`}>\n      <Heading level={2}>{props.title}</Heading>\n      <Paragraph>{props.preview}</Paragraph>\n    </ArticleLink>\n  )\n}\n\nexport const query = graphql`\n  {\n    allMdx {\n      edges {\n        node {\n          slug\n          frontmatter {\n            title\n            preview\n            createdWhen\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default ThoughtsIndex\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { Margin } from \"styled-components-spacing\"\n\nconst Heading1 = styled.h1`\n  font-size: 2em;\n  margin: 0;\n`\n\nconst Heading2 = styled.h2`\n  font-size: 1.5em;\n  margin: 0;\n`\n\nconst Heading = (props: { children: React.ReactNode; level?: number }) => {\n  const level = props.level ?? 1\n  if (level === 1) {\n    return (\n      <Margin bottom=\"medium\">\n        <Heading1 {...props} />\n      </Margin>\n    )\n  } else if (level === 2) {\n    return (\n      <Margin bottom=\"medium\">\n        <Heading2 {...props} />\n      </Margin>\n    )\n  }\n  throw new Error(`Unsupported <Heading> level: ${props.level}`)\n}\n\nexport default Heading\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { Margin } from \"styled-components-spacing\"\n\nconst StyledParagraph = styled.p`\n  margin: 0;\n`\n\nconst Paragraph = (props: { children: React.ReactNode }) => {\n  return (\n    <Margin bottom=\"medium\">\n      <StyledParagraph {...props} />\n    </Margin>\n  )\n}\n\nexport default Paragraph\n"],"sourceRoot":""}