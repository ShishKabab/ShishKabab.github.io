{"version":3,"sources":["webpack:///./src/features/posts/utils.ts","webpack:///./src/pages/thoughts-in-progress/index.tsx","webpack:///./src/components/page-title.tsx","webpack:///./src/features/posts/components/index.tsx"],"names":["getPostsFromQuery","props","items","data","allMdx","edges","filter","edge","node","slug","frontmatter","publishedWhen","startsWith","path","map","createdWhen","Date","title","preview","sort","leftItem","rightItem","lhs","rhs","getTime","query","ThoughtIndex","description","PageTitle","children","ArticleList","styled","div","theme","spacing","large","ArticleLink","Link","PostIndex","PostList","item","published","key","bottom","PostPreview","publishedString","toLocaleDateString","weekday","year","month","day","to","level","subtext"],"mappings":"8FAEO,SAASA,EAAkBC,GAAY,IAEpCC,EADYD,EAAME,KAAKC,OAArBC,MAEHC,QAAO,SAAAC,GAAQ,IACJC,EAASD,EAATC,KACAC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,YACd,SAAKA,aAAD,EAACA,EAAaC,iBAGV,IAAMF,GAAMG,WAAWX,EAAMY,SAExCC,KAAI,SAAAP,GAAQ,IACDC,EAASD,EAATC,KACAE,EAAgBF,EAAhBE,YAGR,MAAO,CACHK,YAHgB,IAAIC,KAAKN,EAAYK,aAIrCJ,cAHkB,IAAIK,KAAKN,EAAYC,eAIvCF,KAAMD,EAAKC,KACXQ,MAAOP,EAAYO,MACnBC,QAASR,EAAYQ,YAQjC,OALAhB,EAAMiB,MAAK,SAACC,EAAUC,GAAc,QAC1BC,EAAG,UAAGF,EAAST,qBAAZ,QAA6BS,EAASL,YACzCQ,EAAG,UAAGF,EAAUV,qBAAb,QAA8BU,EAAUN,YACjD,OAAOO,EAAIE,UAAYD,EAAIC,UAAY,GAAK,KAEzCtB,EA7BX,mC,oCCDA,kFAmBauB,EAAQ,aAkBNC,UAlCM,SAACzB,GAClB,OACI,kBAAC,IAAD,iBACQA,EADR,CAEIgB,MAAO,uBACPU,YACI,0N,uMCUDC,EATG,SAAC3B,GACjB,OACE,oCACI,kBAAC,IAAD,CAAKgB,MAAOhB,EAAM4B,WAClB,kBAAC,IAAD,KAAU5B,EAAM4B,Y,wBCFlBC,EAAcC,UAAOC,IAAV,0EAAGD,CAAH,+BACM,SAAA9B,GAAK,OAAIA,EAAMgC,MAAMC,QAAQC,SAG9CC,EAAcL,kBAAOM,QAAV,0EAAGN,CAAH,yCAKJO,EAAY,SAACrC,GAMtB,IAAMC,EAAQF,YAAkBC,GAChC,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,KAAYA,EAAMgB,OACjBhB,EAAM0B,aAAe,kBAAC,IAAD,KAAY1B,EAAM0B,aACxC,kBAACG,EAAD,KACI,kBAACS,EAAD,CAAUrC,MAAOA,OAM1B,SAASqC,EAAStC,GAEtB,IACSC,EAAUD,EAAVC,MACR,OACI,oCACKA,EAAMY,KAAI,SAAA0B,GACP,IAAMC,EAAY,IAAIzB,KAAKwB,EAAK7B,eAChC,OACI,kBAAC,SAAD,CAAQ+B,IAAKF,EAAK/B,KAAMkC,OAAO,UAC3B,kBAAC,EAAD,CACIlC,KAAM+B,EAAK/B,KACXQ,MAAOuB,EAAKvB,MACZN,cAAe8B,EACfvB,QAASsB,EAAKtB,eASnC,IAAM0B,EAAc,SAAC3C,GAMxB,IAAM4C,EAAkB5C,EAAMU,cAAcmC,mBAAmB,QAAS,CACpEC,QAAS,OACTC,KAAM,UACNC,MAAO,OACPC,IAAK,YAET,OACI,kBAACd,EAAD,CAAae,GAAE,IAAMlD,EAAMQ,MACvB,kBAAC,IAAD,CAAS2C,MAAO,EAAGC,QAASR,GACvB5C,EAAMgB,OAEX,kBAAC,IAAD,KAAYhB,EAAMiB","file":"component---src-pages-thoughts-in-progress-index-tsx-aa4cd988a53f04b9e203.js","sourcesContent":["import { graphql } from \"gatsby\"\n\nexport function getPostsFromQuery(props: any) {\n    const { edges } = props.data.allMdx\n    const items = (edges as any[])\n        .filter(edge => {\n            const { node } = edge\n            const { slug, frontmatter } = node\n            if (!frontmatter?.publishedWhen) {\n                return false\n            }\n            return (\"/\" + slug).startsWith(props.path)\n        })\n        .map(edge => {\n            const { node } = edge\n            const { frontmatter } = node\n            const createdWhen = new Date(frontmatter.createdWhen)\n            const publishedWhen = new Date(frontmatter.publishedWhen)\n            return {\n                createdWhen,\n                publishedWhen,\n                slug: node.slug as string,\n                title: frontmatter.title as string,\n                preview: frontmatter.preview as string,\n            }\n        })\n    items.sort((leftItem, rightItem) => {\n        const lhs = leftItem.publishedWhen ?? leftItem.createdWhen\n        const rhs = rightItem.publishedWhen ?? rightItem.createdWhen\n        return lhs.getTime() < rhs.getTime() ? 1 : -1\n    })\n    return items\n}\n\nexport const allPostsQuery = graphql`\n{\n    allMdx {\n        edges {\n            node {\n                slug\n                frontmatter {\n                    title\n                    preview\n                    createdWhen\n                    publishedWhen\n                }\n            }\n        }\n    }\n}\n`","import { graphql } from \"gatsby\"\nimport React from \"react\"\nimport { PostIndex } from \"../../features/posts/components\"\n\nconst ThoughtIndex = (props: any) => {\n    return (\n        <PostIndex\n            {...props}\n            title={\"Thoughts in progress\"}\n            description={\n                <>\n                    Here I collect things I'm thinking about and may grow into\n                    articles over time, so I can collect feedback from other\n                    people and generate discussion as I reseach these topics.\n                </>\n            }\n        />\n    )\n}\n\nexport const query = graphql`\n    {\n        allMdx {\n            edges {\n                node {\n                    slug\n                    frontmatter {\n                        title\n                        preview\n                        createdWhen\n                        publishedWhen\n                    }\n                }\n            }\n        }\n    }\n`\n\nexport default ThoughtIndex\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport Heading from \"./heading\"\nimport SEO from \"./seo\"\n\nconst PageTitle = (props: { children: string }) => {\n  return (\n    <>\n        <SEO title={props.children} />\n        <Heading>{props.children}</Heading>\n    </>\n  )\n}\n\nexport default PageTitle\n","import { Link } from \"gatsby\"\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { Margin } from \"styled-components-spacing\"\nimport Heading from \"../../../components/heading\"\n// import { Link } from \"gatsby\"\n\nimport Layout from \"../../../components/layout\"\nimport PageTitle from \"../../../components/page-title\"\nimport Paragraph from \"../../../components/paragraph\"\nimport Subtitle from \"../../../components/subititle\"\nimport { getPostsFromQuery } from \"../../../features/posts/utils\"\n\nconst ArticleList = styled.div`\n    margin-top: calc(${props => props.theme.spacing.large} * 4);\n`\n\nconst ArticleLink = styled(Link)`\n    color: inherit;\n    text-decoration: none;\n`\n\nexport const PostIndex = (props: {\n    data: any\n    path: string\n    title: string\n    description?: React.ReactNode\n}) => {\n    const items = getPostsFromQuery(props)\n    return (\n        <Layout>\n            <PageTitle>{props.title}</PageTitle>\n            {props.description && <Paragraph>{props.description}</Paragraph>}\n            <ArticleList>\n                <PostList items={items} />\n            </ArticleList>\n        </Layout>\n    )\n}\n\nexport function PostList(props: {\n    items: ReturnType<typeof getPostsFromQuery>\n}) {\n    const { items } = props\n    return (\n        <>\n            {items.map(item => {\n                const published = new Date(item.publishedWhen)\n                return (\n                    <Margin key={item.slug} bottom=\"medium\">\n                        <PostPreview\n                            slug={item.slug}\n                            title={item.title}\n                            publishedWhen={published}\n                            preview={item.preview}\n                        />\n                    </Margin>\n                )\n            })}\n        </>\n    )\n}\n\nexport const PostPreview = (props: {\n    slug: string\n    title: string\n    publishedWhen: Date\n    preview: React.ReactNode\n}) => {\n    const publishedString = props.publishedWhen.toLocaleDateString(\"en-US\", {\n        weekday: \"long\",\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n    })\n    return (\n        <ArticleLink to={`/${props.slug}`}>\n            <Heading level={2} subtext={publishedString}>\n                {props.title}\n            </Heading>\n            <Paragraph>{props.preview}</Paragraph>\n        </ArticleLink>\n    )\n}\n"],"sourceRoot":""}