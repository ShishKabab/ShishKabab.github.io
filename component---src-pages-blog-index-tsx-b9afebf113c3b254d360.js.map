{"version":3,"sources":["webpack:///./src/features/posts/utils.ts","webpack:///./src/components/page-title.tsx","webpack:///./src/features/posts/components/index.tsx","webpack:///./src/pages/blog/index.tsx"],"names":["getPostsFromQuery","props","items","data","allMdx","edges","filter","edge","node","slug","frontmatter","publishedWhen","startsWith","path","map","createdWhen","Date","title","preview","sort","leftItem","rightItem","lhs","rhs","getTime","PageTitle","children","ArticleList","styled","div","theme","spacing","large","ArticleLink","Link","PostIndex","description","PostList","item","published","key","bottom","PostPreview","publishedString","toLocaleDateString","weekday","year","month","day","to","level","subtext","query","BlogIndex"],"mappings":"6FAEO,SAASA,EAAkBC,GAAY,IAEtCC,EADYD,EAAME,KAAKC,OAArBC,MAELC,QAAO,SAACC,GAAS,IACRC,EAASD,EAATC,KACAC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,YACd,SAAKA,aAAD,EAACA,EAAaC,iBAGV,IAAMF,GAAMG,WAAWX,EAAMY,SAEtCC,KAAI,SAACP,GAAS,IACLC,EAASD,EAATC,KACAE,EAAgBF,EAAhBE,YAGR,MAAO,CACLK,YAHkB,IAAIC,KAAKN,EAAYK,aAIvCJ,cAHoB,IAAIK,KAAKN,EAAYC,eAIzCF,KAAMD,EAAKC,KACXQ,MAAOP,EAAYO,MACnBC,QAASR,EAAYQ,YAQ3B,OALAhB,EAAMiB,MAAK,SAACC,EAAUC,GAAc,QAC5BC,EAAG,UAAGF,EAAST,qBAAZ,QAA6BS,EAASL,YACzCQ,EAAG,UAAGF,EAAUV,qBAAb,QAA8BU,EAAUN,YACjD,OAAOO,EAAIE,UAAYD,EAAIC,UAAY,GAAK,KAEvCtB,EA7BT,mC,uMCkBeuB,EATG,SAACxB,GACjB,OACE,oCACE,kBAAC,IAAD,CAAKgB,MAAOhB,EAAMyB,WAClB,kBAAC,IAAD,KAAUzB,EAAMyB,Y,wBCFhBC,EAAcC,UAAOC,IAAV,0EAAGD,CAAH,+BACI,SAAC3B,GAAD,OAAWA,EAAM6B,MAAMC,QAAQC,SAG9CC,EAAcL,kBAAOM,QAAV,0EAAGN,CAAH,yCAKJO,EAAY,SAAClC,GAMxB,IAAMC,EAAQF,YAAkBC,GAChC,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,KAAYA,EAAMgB,OACjBhB,EAAMmC,aAAe,kBAAC,IAAD,KAAYnC,EAAMmC,aACxC,kBAACT,EAAD,KACE,kBAACU,EAAD,CAAUnC,MAAOA,OAMlB,SAASmC,EAASpC,GAEtB,IACOC,EAAUD,EAAVC,MACR,OACE,oCACGA,EAAMY,KAAI,SAACwB,GACV,IAAMC,EAAY,IAAIvB,KAAKsB,EAAK3B,eAChC,OACE,kBAAC,SAAD,CAAQ6B,IAAKF,EAAK7B,KAAMgC,OAAO,UAC7B,kBAAC,EAAD,CACEhC,KAAM6B,EAAK7B,KACXQ,MAAOqB,EAAKrB,MACZN,cAAe4B,EACfrB,QAASoB,EAAKpB,eASrB,IAAMwB,EAAc,SAACzC,GAM1B,IAAM0C,EAAkB1C,EAAMU,cAAciC,mBAAmB,QAAS,CACtEC,QAAS,OACTC,KAAM,UACNC,MAAO,OACPC,IAAK,YAEP,OACE,kBAACf,EAAD,CAAagB,GAAE,IAAMhD,EAAMQ,MACzB,kBAAC,IAAD,CAASyC,MAAO,EAAGC,QAASR,GACzB1C,EAAMgB,OAET,kBAAC,IAAD,KAAYhB,EAAMiB,Y,kCC/ExB,kFAOakC,EAAQ,aAkBNC,UAtBG,SAACpD,GACjB,OAAO,kBAAC,IAAD,iBAAeA,EAAf,CAAsBgB,MAAO","file":"component---src-pages-blog-index-tsx-b9afebf113c3b254d360.js","sourcesContent":["import { graphql } from \"gatsby\";\n\nexport function getPostsFromQuery(props: any) {\n  const { edges } = props.data.allMdx;\n  const items = (edges as any[])\n    .filter((edge) => {\n      const { node } = edge;\n      const { slug, frontmatter } = node;\n      if (!frontmatter?.publishedWhen) {\n        return false;\n      }\n      return (\"/\" + slug).startsWith(props.path);\n    })\n    .map((edge) => {\n      const { node } = edge;\n      const { frontmatter } = node;\n      const createdWhen = new Date(frontmatter.createdWhen);\n      const publishedWhen = new Date(frontmatter.publishedWhen);\n      return {\n        createdWhen,\n        publishedWhen,\n        slug: node.slug as string,\n        title: frontmatter.title as string,\n        preview: frontmatter.preview as string,\n      };\n    });\n  items.sort((leftItem, rightItem) => {\n    const lhs = leftItem.publishedWhen ?? leftItem.createdWhen;\n    const rhs = rightItem.publishedWhen ?? rightItem.createdWhen;\n    return lhs.getTime() < rhs.getTime() ? 1 : -1;\n  });\n  return items;\n}\n\nexport const allPostsQuery = graphql`\n  {\n    allMdx {\n      edges {\n        node {\n          slug\n          frontmatter {\n            title\n            preview\n            createdWhen\n            publishedWhen\n          }\n        }\n      }\n    }\n  }\n`;\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\";\nimport Heading from \"./heading\";\nimport SEO from \"./seo\";\n\nconst PageTitle = (props: { children: string }) => {\n  return (\n    <>\n      <SEO title={props.children} />\n      <Heading>{props.children}</Heading>\n    </>\n  );\n};\n\nexport default PageTitle;\n","import { Link } from \"gatsby\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Margin } from \"styled-components-spacing\";\nimport Heading from \"../../../components/heading\";\n// import { Link } from \"gatsby\"\n\nimport Layout from \"../../../components/layout\";\nimport PageTitle from \"../../../components/page-title\";\nimport Paragraph from \"../../../components/paragraph\";\nimport Subtitle from \"../../../components/subititle\";\nimport { getPostsFromQuery } from \"../../../features/posts/utils\";\n\nconst ArticleList = styled.div`\n  margin-top: calc(${(props) => props.theme.spacing.large} * 4);\n`;\n\nconst ArticleLink = styled(Link)`\n  color: inherit;\n  text-decoration: none;\n`;\n\nexport const PostIndex = (props: {\n  data: any;\n  path: string;\n  title: string;\n  description?: React.ReactNode;\n}) => {\n  const items = getPostsFromQuery(props);\n  return (\n    <Layout>\n      <PageTitle>{props.title}</PageTitle>\n      {props.description && <Paragraph>{props.description}</Paragraph>}\n      <ArticleList>\n        <PostList items={items} />\n      </ArticleList>\n    </Layout>\n  );\n};\n\nexport function PostList(props: {\n  items: ReturnType<typeof getPostsFromQuery>;\n}) {\n  const { items } = props;\n  return (\n    <>\n      {items.map((item) => {\n        const published = new Date(item.publishedWhen);\n        return (\n          <Margin key={item.slug} bottom=\"medium\">\n            <PostPreview\n              slug={item.slug}\n              title={item.title}\n              publishedWhen={published}\n              preview={item.preview}\n            />\n          </Margin>\n        );\n      })}\n    </>\n  );\n}\n\nexport const PostPreview = (props: {\n  slug: string;\n  title: string;\n  publishedWhen: Date;\n  preview: React.ReactNode;\n}) => {\n  const publishedString = props.publishedWhen.toLocaleDateString(\"en-US\", {\n    weekday: \"long\",\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n  });\n  return (\n    <ArticleLink to={`/${props.slug}`}>\n      <Heading level={2} subtext={publishedString}>\n        {props.title}\n      </Heading>\n      <Paragraph>{props.preview}</Paragraph>\n    </ArticleLink>\n  );\n};\n","import { graphql } from \"gatsby\";\nimport React from \"react\";\nimport { PostIndex } from \"../../features/posts/components\";\n\nconst BlogIndex = (props: any) => {\n  return <PostIndex {...props} title={\"Blog\"} />;\n};\n\nexport const query = graphql`\n  {\n    allMdx {\n      edges {\n        node {\n          slug\n          frontmatter {\n            title\n            preview\n            createdWhen\n            publishedWhen\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default BlogIndex;\n"],"sourceRoot":""}