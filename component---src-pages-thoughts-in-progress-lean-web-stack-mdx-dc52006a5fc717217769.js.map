{"version":3,"sources":["webpack:///./src/components/heading.tsx","webpack:///./src/components/toggle-list.tsx","webpack:///./src/components/layout-markdown.tsx","webpack:///./src/pages/thoughts-in-progress/lean-web-stack.mdx","webpack:///./src/components/paragraph.tsx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["Heading1","styled","h1","Heading2","h2","Heading","props","level","bottom","Error","ListItemBullet","div","rotate","css","ListItemContent","ToggleList","state","itemsExpanded","toggle","key","this","setState","renderItem","item","hasChildren","children","length","expanded","right","onClick","undefined","content","map","node","left","child","render","React","Component","MarkdownLayout","pageContext","frontmatter","title","components","h3","p","Children","type","displayName","mdxType","parsed","parseMdxListRoot","element","generateKey","nodes","Array","listItem","push","parseMdxListItem","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","isMDXComponent","StyledParagraph","Paragraph","_objectWithoutPropertiesLoose","source","excluded","i","target","sourceKeys","Object","keys","indexOf"],"mappings":"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","file":"component---src-pages-thoughts-in-progress-lean-web-stack-mdx-dc52006a5fc717217769.js","sourcesContent":["/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { Margin } from \"styled-components-spacing\"\n\nconst Heading1 = styled.h1`\n  font-size: 2em;\n  margin: 0;\n`\n\nconst Heading2 = styled.h2`\n  font-size: 1.5em;\n  margin: 0;\n`\n\nconst Heading = (props: { children: React.ReactNode; level?: number }) => {\n  const level = props.level ?? 1\n  if (level === 1) {\n    return (\n      <Margin bottom=\"medium\">\n        <Heading1 {...props} />\n      </Margin>\n    )\n  } else if (level === 2) {\n    return (\n      <Margin bottom=\"medium\">\n        <Heading2 {...props} />\n      </Margin>\n    )\n  }\n  throw new Error(`Unsupported <Heading> level: ${props.level}`)\n}\n\nexport default Heading\n","import React from \"react\"\nimport styled, { css } from \"styled-components\"\nimport { Margin } from \"styled-components-spacing\"\n\nexport interface ToggleListItem {\n  key: string\n  content: Array<{ key: string; node: React.ReactNode }>\n  children: ToggleListItem[]\n}\n\nconst ListItemBullet = styled.div<{ rotate?: string }>`\n  width: 10px;\n  cursor: pointer;\n  transition: transform 0.15s linear;\n  ${props =>\n    props.rotate\n      ? css`\n          transform: rotate(${props.rotate});\n        `\n      : null}\n`\n\nconst ListItemContent = styled.div`\n  display: flex;\n`\n\ninterface State {\n  itemsExpanded: { [key: string]: boolean }\n}\n\nexport default class ToggleList extends React.Component<\n  {\n    children: ToggleListItem[]\n  },\n  State\n> {\n  state: State = {\n    itemsExpanded: {},\n  }\n\n  toggle(key: string) {\n    this.setState({\n      itemsExpanded: {\n        ...this.state.itemsExpanded,\n        [key]: !this.state.itemsExpanded[key],\n      },\n    })\n  }\n\n  renderItem(item: ToggleListItem) {\n    const hasChildren = !!item.children.length\n    const expanded = !!this.state.itemsExpanded[item.key]\n    return (\n      <div key={item.key}>\n        <ListItemContent>\n          <Margin right=\"medium\">\n            {!hasChildren && <ListItemBullet>&#8226;</ListItemBullet>}\n            {hasChildren && (\n              <ListItemBullet\n                onClick={() => this.toggle(item.key)}\n                rotate={expanded ? \"90deg\" : undefined}\n              >\n                &#8227;\n              </ListItemBullet>\n            )}\n          </Margin>\n          <div>{item.content.map(content => content.node)}</div>\n        </ListItemContent>\n        {expanded && (\n          <Margin left=\"largest\">\n            {item.children.map(child => this.renderItem(child))}\n          </Margin>\n        )}\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <Margin bottom=\"medium\">\n        {this.props.children.map(child => this.renderItem(child))}\n      </Margin>\n    )\n  }\n}\n","import React from \"react\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport Layout from \"./layout\"\nimport Heading from \"./heading\"\nimport Paragraph from \"./paragraph\"\nimport ToggleList, { ToggleListItem } from \"./toggle-list\"\n\nexport default function MarkdownLayout(props: {\n  children: React.ReactNode\n  pageContext: any\n}) {\n  return (\n    <Layout>\n      <Heading level={1}>{props.pageContext.frontmatter.title}</Heading>\n      <MDXProvider\n        components={{\n          h1: props => <Heading level={1}>{props.children}</Heading>,\n          h2: props => <Heading level={3}>{props.children}</Heading>,\n          h3: props => <Heading level={3}>{props.children}</Heading>,\n          p: props => <Paragraph>{props.children}</Paragraph>,\n        }}\n      >\n        {React.Children.map(props.children, child => {\n          if (!child || typeof child !== \"object\") {\n            return child\n          }\n          if (!(\"type\" in child && \"props\" in child)) {\n            return child\n          }\n          if (\n            (child.type as any).displayName !== \"MDXCreateElement\" ||\n            child.props.mdxType !== \"ul\"\n          ) {\n            return child\n          }\n\n          let key = 0\n          const parsed = parseMdxListRoot(child, () => `${key++}`)\n          // console.log(parsed)\n          // return null\n          return <ToggleList children={parsed} />\n        })}\n      </MDXProvider>\n    </Layout>\n  )\n}\n\nexport function parseMdxListRoot(\n  element: React.ReactElement,\n  generateKey: () => string\n) {\n  const nodes: ToggleListItem[] = []\n  let children = element.props.children\n  if (!(children instanceof Array)) {\n    children = [children]\n  }\n\n  for (const listItem of children) {\n    if (listItem.props.mdxType !== \"li\") {\n      continue\n    }\n\n    nodes.push(parseMdxListItem(listItem, generateKey))\n  }\n\n  return nodes\n}\n\nexport function parseMdxListItem(\n  element: React.ReactElement,\n  generateKey: () => string\n): ToggleListItem {\n  if (typeof element.props.children === \"string\") {\n    return {\n      content: [{ key: generateKey(), node: element.props.children }],\n      children: [],\n      key: generateKey(),\n    }\n  }\n\n  const item: ToggleListItem = { content: [], children: [], key: generateKey() }\n  let children = element.props.children\n  if (!(children instanceof Array)) {\n    children = [children]\n  }\n  for (const child of children) {\n    if (typeof child === \"string\") {\n      item.content.push({ key: generateKey(), node: child })\n      continue\n    }\n    if (child.props.mdxType !== \"ul\") {\n      item.content.push({ key: generateKey(), node: child })\n      continue\n    }\n    item.children = parseMdxListRoot(child, generateKey)\n  }\n  return item\n}\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/vincent/Documents/Develop/Web/PersonalWebsite/website/src/components/layout-markdown.tsx\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`TBD`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { Margin } from \"styled-components-spacing\"\n\nconst StyledParagraph = styled.p`\n  margin: 0;\n`\n\nconst Paragraph = (props: { children: React.ReactNode }) => {\n  return (\n    <Margin bottom=\"medium\">\n      <StyledParagraph {...props} />\n    </Margin>\n  )\n}\n\nexport default Paragraph\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}