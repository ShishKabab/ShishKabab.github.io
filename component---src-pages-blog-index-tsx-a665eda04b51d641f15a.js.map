{"version":3,"sources":["webpack:///./src/components/page-title.tsx","webpack:///./src/features/posts/utils.ts","webpack:///./src/features/posts/components.tsx","webpack:///./src/pages/blog/index.tsx"],"names":["PageTitle","props","title","children","ArticleList","styled","div","theme","spacing","large","ArticleLink","Link","PostIndex","items","data","allMdx","edges","filter","edge","node","slug","frontmatter","publishedWhen","startsWith","path","map","createdWhen","Date","preview","sort","leftItem","rightItem","lhs","rhs","getTime","getPostsFromQuery","description","item","published","key","bottom","PostPreview","publishedString","toLocaleDateString","weekday","year","month","day","to","level","subtext","query","BlogIndex"],"mappings":"8NAoBeA,EATG,SAACC,GACjB,OACE,oCACI,kBAAC,IAAD,CAAKC,MAAOD,EAAME,WAClB,kBAAC,IAAD,KAAUF,EAAME,Y,YCmBjB,ICrBDC,EAAcC,UAAOC,IAAV,6EAAGD,CAAH,+BACM,SAAAJ,GAAK,OAAIA,EAAMM,MAAMC,QAAQC,SAG9CC,EAAcL,kBAAOM,QAAV,6EAAGN,CAAH,yCAKJO,EAAY,SAACX,GAMtB,IAAMY,ED1BH,SAA2BZ,GAAY,IAEpCY,EADYZ,EAAMa,KAAKC,OAArBC,MAEHC,QAAO,SAAAC,GAAQ,IACJC,EAASD,EAATC,KACAC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,YACd,SAAKA,aAAD,EAACA,EAAaC,iBAGV,IAAMF,GAAMG,WAAWtB,EAAMuB,SAExCC,KAAI,SAAAP,GAAQ,IACDC,EAASD,EAATC,KACAE,EAAgBF,EAAhBE,YAGR,MAAO,CACHK,YAHgB,IAAIC,KAAKN,EAAYK,aAIrCJ,cAHkB,IAAIK,KAAKN,EAAYC,eAIvCF,KAAMD,EAAKC,KACXlB,MAAOmB,EAAYnB,MACnB0B,QAASP,EAAYO,YAQjC,OALAf,EAAMgB,MAAK,SAACC,EAAUC,GAAc,QAC1BC,EAAG,UAAGF,EAASR,qBAAZ,QAA6BQ,EAASJ,YACzCO,EAAG,UAAGF,EAAUT,qBAAb,QAA8BS,EAAUL,YACjD,OAAOM,EAAIE,UAAYD,EAAIC,UAAY,GAAK,KAEzCrB,ECHOsB,CAAkBlC,GAChC,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,KAAYA,EAAMC,OACjBD,EAAMmC,aAAe,kBAAC,IAAD,KAAYnC,EAAMmC,aACxC,kBAAChC,EAAD,KACKS,EAAMY,KAAI,SAAAY,GACP,IAAMC,EAAY,IAAIX,KAAKU,EAAKf,eAChC,OACI,kBAAC,SAAD,CAAQiB,IAAKF,EAAKjB,KAAMoB,OAAO,UAC3B,kBAAC,EAAD,CACIpB,KAAMiB,EAAKjB,KACXlB,MAAOmC,EAAKnC,MACZoB,cAAegB,EACfV,QAASS,EAAKT,iBAUjCa,EAAc,SAACxC,GAMxB,IAAMyC,EAAkBzC,EAAMqB,cAAcqB,mBAAmB,QAAS,CACpEC,QAAS,OACTC,KAAM,UACNC,MAAO,OACPC,IAAK,YAET,OACI,kBAACrC,EAAD,CAAasC,GAAE,IAAM/C,EAAMmB,MACvB,kBAAC,IAAD,CAAS6B,MAAO,EAAGC,QAASR,GACvBzC,EAAMC,OAEX,kBAAC,IAAD,KAAYD,EAAM2B,Y,kCCpE9B,kFAOauB,EAAQ,aAkBNC,UAtBG,SAACnD,GACf,OAAO,kBAAC,IAAD,iBAAeA,EAAf,CAAsBC,MAAO","file":"component---src-pages-blog-index-tsx-a665eda04b51d641f15a.js","sourcesContent":["/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport Heading from \"./heading\"\nimport SEO from \"./seo\"\n\nconst PageTitle = (props: { children: string }) => {\n  return (\n    <>\n        <SEO title={props.children} />\n        <Heading>{props.children}</Heading>\n    </>\n  )\n}\n\nexport default PageTitle\n","import { graphql } from \"gatsby\"\n\nexport function getPostsFromQuery(props: any) {\n    const { edges } = props.data.allMdx\n    const items = (edges as any[])\n        .filter(edge => {\n            const { node } = edge\n            const { slug, frontmatter } = node\n            if (!frontmatter?.publishedWhen) {\n                return false\n            }\n            return (\"/\" + slug).startsWith(props.path)\n        })\n        .map(edge => {\n            const { node } = edge\n            const { frontmatter } = node\n            const createdWhen = new Date(frontmatter.createdWhen)\n            const publishedWhen = new Date(frontmatter.publishedWhen)\n            return {\n                createdWhen,\n                publishedWhen,\n                slug: node.slug as string,\n                title: frontmatter.title as string,\n                preview: frontmatter.preview as string,\n            }\n        })\n    items.sort((leftItem, rightItem) => {\n        const lhs = leftItem.publishedWhen ?? leftItem.createdWhen\n        const rhs = rightItem.publishedWhen ?? rightItem.createdWhen\n        return lhs.getTime() < rhs.getTime() ? 1 : -1\n    })\n    return items\n}\n\nexport const allPostsQuery = graphql`\n{\n    allMdx {\n        edges {\n            node {\n                slug\n                frontmatter {\n                    title\n                    preview\n                    createdWhen\n                    publishedWhen\n                }\n            }\n        }\n    }\n}\n`","import { Link } from \"gatsby\"\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { Margin } from \"styled-components-spacing\"\nimport Heading from \"../../components/heading\"\n// import { Link } from \"gatsby\"\n\nimport Layout from \"../../components/layout\"\nimport PageTitle from \"../../components/page-title\"\nimport Paragraph from \"../../components/paragraph\"\nimport Subtitle from \"../../components/subititle\"\nimport { getPostsFromQuery } from \"../../features/posts/utils\"\n\nconst ArticleList = styled.div`\n    margin-top: calc(${props => props.theme.spacing.large} * 4);\n`\n\nconst ArticleLink = styled(Link)`\n    color: inherit;\n    text-decoration: none;\n`\n\nexport const PostIndex = (props: {\n    data: any\n    path: string\n    title: string\n    description?: React.ReactNode\n}) => {\n    const items = getPostsFromQuery(props)\n    return (\n        <Layout>\n            <PageTitle>{props.title}</PageTitle>\n            {props.description && <Paragraph>{props.description}</Paragraph>}\n            <ArticleList>\n                {items.map(item => {\n                    const published = new Date(item.publishedWhen)\n                    return (\n                        <Margin key={item.slug} bottom=\"medium\">\n                            <PostPreview\n                                slug={item.slug}\n                                title={item.title}\n                                publishedWhen={published}\n                                preview={item.preview}\n                            />\n                        </Margin>\n                    )\n                })}\n            </ArticleList>\n        </Layout>\n    )\n}\n\nexport const PostPreview = (props: {\n    slug: string\n    title: string\n    publishedWhen: Date\n    preview: React.ReactNode\n}) => {\n    const publishedString = props.publishedWhen.toLocaleDateString(\"en-US\", {\n        weekday: \"long\",\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n    })\n    return (\n        <ArticleLink to={`/${props.slug}`}>\n            <Heading level={2} subtext={publishedString}>\n                {props.title}\n            </Heading>\n            <Paragraph>{props.preview}</Paragraph>\n        </ArticleLink>\n    )\n}\n","import { graphql } from \"gatsby\"\nimport React from \"react\"\nimport { PostIndex } from \"../../features/posts/components\"\n\nconst BlogIndex = (props: any) => {\n    return <PostIndex {...props} title={\"Blog\"} />\n}\n\nexport const query = graphql`\n    {\n        allMdx {\n            edges {\n                node {\n                    slug\n                    frontmatter {\n                        title\n                        preview\n                        createdWhen\n                        publishedWhen\n                    }\n                }\n            }\n        }\n    }\n`\n\nexport default BlogIndex\n"],"sourceRoot":""}