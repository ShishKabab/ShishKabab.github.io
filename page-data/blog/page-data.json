{"componentChunkName":"component---src-pages-blog-index-tsx","path":"/blog/","result":{"data":{"allMdx":{"edges":[{"node":{"slug":"thoughts-in-progress/lean-web-stack","frontmatter":{"title":"A low level web stack","preview":"TBD","createdWhen":"2021-01-30T17:00:00.000Z","publishedWhen":null,"discoverable":null}}},{"node":{"slug":"thoughts-in-progress/webdev-workflows","frontmatter":{"title":"Designing modern web development workflows","preview":"Web development has gone through many technological iterations. Here I ask questions about what we'd want from an ideal experience, not only from the perspective of developers, but for the entire organization. And, there's some thoughts on how to get there.\n","createdWhen":"2021-01-30T15:00:00.000Z","publishedWhen":null,"discoverable":null}}},{"node":{"slug":"blog/data-driven-ui","frontmatter":{"title":"A data-driven UI system","preview":"","createdWhen":"2022-05-24T00:00:00.000Z","publishedWhen":"2022-03-24T00:00:00.000Z","discoverable":false}}},{"node":{"slug":"blog/scenario-replays-requirements","frontmatter":{"title":"What you need to get scenario replays in your product","preview":"In the previous article I described how scenario replays improve development and cross-team workflows. Now, we start to dive in how they work with a high-level overview of what they are and what they need to able to do.","createdWhen":"2022-03-02T00:00:00.000Z","publishedWhen":"2022-03-08T00:00:00.000Z","discoverable":null}}},{"node":{"slug":"blog/rapid-iteration-backend","frontmatter":{"title":"Structuring your back-end for rapid iteration during development","preview":"When developing, it can be very useful to start your back-end in different states with different data sets. If you want to go the next level, you can also go to the next level allowing multiple instances of your back-end to run in the same process, allowing you to display your application in different states at the same time.","createdWhen":"2022-03-13T00:00:00.000Z","publishedWhen":"2022-03-23T00:00:00.000Z","discoverable":null}}},{"node":{"slug":"blog/storex-lessons-learned","frontmatter":{"title":"Lessons learned developing the Storex database abstraction library","preview":"Storex has helped Memex to evolve across three different database systems, peer-to-peer sync and its eventual transition to the cloud. In this article, I describe what worked and what could be improved.","createdWhen":"2022-04-14T00:00:00.000Z","publishedWhen":"2022-04-14T00:00:00.000Z","discoverable":null}}},{"node":{"slug":"blog/scenario-replays","frontmatter":{"title":"Scenario replays and how they improve workflows across teams","preview":"With the right setup, it becomes possible to replay actions a user might take to jump specific points in a UI. This allows developers to get things done quicker and collaborate more fluidly with designers, QA and other teams.","createdWhen":"2022-02-06T00:00:00.000Z","publishedWhen":"2022-02-22T00:00:00.000Z","discoverable":null}}},{"node":{"slug":"blog/storex-modular-storage","frontmatter":{"title":"Storex â€” A modular and portable database abstraction ecosystem for JavaScript","preview":"Storex is a collection of Typescript packages that allows you work with a highly diverse set of databases (SQL, IndexedDB, Firestore) in a unified way. It's the storage layer powering memex.garden and its sync across web browsers and mobile devices.","createdWhen":"2019-01-24T00:00:00.000Z","publishedWhen":"2019-01-24T00:00:00.000Z","discoverable":null}}}]}},"pageContext":{}},"staticQueryHashes":["63159454"]}